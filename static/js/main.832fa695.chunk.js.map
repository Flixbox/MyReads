{"version":3,"sources":["components/Navigation.js","components/Library.js","components/Search.js","components/MainView.js","theme.js","components/App.js","serviceWorker.js","index.js"],"names":["Navigation","state","top","left","bottom","right","toggleDrawer","side","open","_this","setState","Object","defineProperty","classes","this","props","react_default","a","createElement","className","root","index_es","position","navBar","variant","color","grow","react_router_dom","to","menuButton","Component","withStyles","flexGrow","marginLeft","marginRight","textDecoration","Library","Search","MainView","react_router","exact","path","component","createMuiTheme","palette","primary","main","purple","secondary","typography","useNextVariants","App","styles","theme","components_Navigation","components_MainView","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAwBMA,6MACFC,MAAQ,CACJC,KAAK,EACLC,MAAM,EACNC,QAAQ,EACRC,OAAO,KAGXC,aAAe,SAACC,EAAMC,GAAP,OAAgB,WAC3BC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAOC,8EAIN,IACEK,EAAYC,KAAKC,MAAjBF,QAER,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAQO,MACpBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,SAAS,UACbN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASF,UAAWN,EAAQU,QACxBP,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYG,QAAQ,KAAKC,MAAM,UAAUN,UAAWN,EAAQa,MAA5D,WAGAV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,IAAIT,UAAWN,EAAQgB,YAC5Bb,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQI,MAAM,WAAd,YAEJT,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,UAAUT,UAAWN,EAAQgB,YAClCb,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQI,MAAM,WAAd,sBA7BPK,aAuCVC,uBA1DA,CACXL,KAAM,CACFM,SAAU,GAEdH,WAAY,CACRI,YAAa,GACbC,YAAa,GACbC,eAAgB,OAChBV,MAAO,UAkDAM,CAAmB/B,WChD5BoC,mLAEsBtB,KAAKC,MAAjBF,QAER,OACIG,EAAAC,EAAAC,cAAA,6BALUY,aAYPC,uBAvBA,GAuBAA,CAAmBK,GCZ5BC,mLAEsBvB,KAAKC,MAAjBF,QAER,OACIG,EAAAC,EAAAC,cAAA,4BALSY,aAYNC,uBAvBA,GAuBAA,CAAmBM,GCR5BC,mLAEsBxB,KAAKC,MAAjBF,QAER,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjCpB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWL,YAP1BP,aAaRC,uBAxBA,GAwBAA,CAAmBO,oBC7BnBK,2BAAe,CAC1BC,QAAS,CACLC,QAAS,CAAEC,KAAMC,IAAO,MACxBC,UAAW,CAAEF,KAAM,YAEvBG,WAAY,CAAEC,iBAAiB,KCQdC,mLAEb,OACInC,EAAAC,EAAAC,cAACkC,EAAA,iBAAD,CAAkBC,MAAOA,GACrBrC,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,eANazB,aCJb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.832fa695.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { Button, Toolbar, AppBar, Typography } from '@material-ui/core'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst styles = {\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 20,\r\n        textDecoration: 'none',\r\n        color: 'white'\r\n    },\r\n}\r\n\r\n/**\r\n * This element represents the top navigation of the application.\r\n *  \r\n * @export\r\n * @class Navigation\r\n * @extends {Component}\r\n */\r\nclass Navigation extends Component {\r\n    state = {\r\n        top: false,\r\n        left: false,\r\n        bottom: false,\r\n        right: false,\r\n    }\r\n\r\n    toggleDrawer = (side, open) => () => {\r\n        this.setState({\r\n            [side]: open,\r\n        })\r\n    }\r\n\r\n    render () {\r\n        const { classes } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <div className={classes.root}>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar className={classes.navBar}>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                                MyReads\r\n                            </Typography>\r\n                            <Link to=\"/\" className={classes.menuButton}>\r\n                                <Button color=\"inherit\">Library</Button>\r\n                            </Link>\r\n                            <Link to=\"/search\" className={classes.menuButton}>\r\n                                <Button color=\"inherit\">Search</Button>\r\n                            </Link>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Navigation)","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport {  } from '@material-ui/core'\r\n\r\nconst styles = {\r\n\r\n}\r\n\r\n/**\r\n *  This represents the main application next to the navigation component.\r\n *  \r\n * @export\r\n * @class MainView\r\n * @extends {Component}\r\n */\r\nclass Library extends Component {\r\n    render () {\r\n        const { classes } = this.props\r\n\r\n        return (\r\n            <div>\r\n                Library\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Library)","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport {  } from '@material-ui/core'\r\n\r\nconst styles = {\r\n\r\n}\r\n\r\n/**\r\n *  This represents the main application next to the navigation component.\r\n *  \r\n * @export\r\n * @class MainView\r\n * @extends {Component}\r\n */\r\nclass Search extends Component {\r\n    render () {\r\n        const { classes } = this.props\r\n\r\n        return (\r\n            <div>\r\n                Search\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Search)","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport {  } from '@material-ui/core'\r\nimport { Route } from \"react-router-dom\"\r\n\r\nimport Library from \"./Library\"\r\nimport Search from \"./Search\"\r\n\r\nconst styles = {\r\n\r\n}\r\n\r\n/**\r\n *  This represents the main application next to the navigation component.\r\n *  \r\n * @export\r\n * @class MainView\r\n * @extends {Component}\r\n */\r\nclass MainView extends Component {\r\n    render () {\r\n        const { classes } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <Route exact path=\"/\" component={Library} />\r\n                <Route path=\"/search\" component={Search} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(MainView)","import { createMuiTheme } from '@material-ui/core/styles'\r\nimport purple from '@material-ui/core/colors/purple'\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n        primary: { main: purple[500] }, // Purple and green play nicely together.\r\n        secondary: { main: '#11cb5f' }, // This is just green.A700 as hex.\r\n    },\r\n    typography: { useNextVariants: true },\r\n})","import React, { Component } from 'react'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport { HashRouter as Router } from \"react-router-dom\"\n\nimport Navigation from './Navigation'\nimport MainView from './MainView'\n\nimport theme from '../theme.js'\n\n/**\n * The main app that contains the entire page.\n * This also contains the theme provider.\n *\n * @class App\n * @extends {Component}\n */\nexport default class App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <Router>\n                    <Navigation/>\n                    <MainView/>\n                </Router>\n            </MuiThemeProvider>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}